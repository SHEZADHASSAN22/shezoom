{"version":3,"sources":["SocketContext.js","components/VideoPlayer.js","components/Options.js","components/Notifications.js","App.js","index.js"],"names":["SocketContext","createContext","socket","io","ContextProvider","children","useState","stream","setstream","me","setMe","call","setCall","callAccepted","setcallAccepted","callEnded","setcallEnded","name","setname","myVideo","useRef","userVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivedCall","Provider","value","callUser","peer","Peer","initiator","trickle","data","emit","userToCall","signalData","leaveCall","destroy","window","location","reload","answerCall","to","VideoPlayer","useContext","className","playsInline","muted","ref","autoPlay","Options","idToCall","setidToCall","handleSubmit","e","preventDefault","onSubmit","placeHolder","label","onChange","target","text","type","onClick","Notifications","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a04d3b9d.chunk.js","sourcesContent":["import React,  {createContext, useState, useRef, useEffect } from 'react';\nimport {io} from 'socket.io-client';\nimport Peer from 'simple-peer';\n\nconst SocketContext = createContext();\n\nconst socket = io('https://shezoom.herokuapp.com/');\n\nconst ContextProvider = ({children}) => {\n    const [stream, setstream] = useState(null);\n    const [me, setMe] = useState(\"\");\n    const [call, setCall] = useState({});\n\n    const [callAccepted, setcallAccepted] = useState(false);\n    const [callEnded, setcallEnded] = useState(false);\n\n    const [name, setname] = useState('')\n\n    //useref is like usestate excpet that changing it wont cause a rerender\n    const myVideo = useRef();\n    const userVideo = useRef();\n    const connectionRef = useRef();\n    \n    // use effect - run the code inside after wtv in the array changes\n    // empty array means use effect only on initial render\n    useEffect(() => {\n        //navigator object to get access to video cam, returns \n        navigator.mediaDevices.getUserMedia({ video: true, audio: true})\n            .then((currentStream) => {\n                setstream(currentStream);\n\n                myVideo.current.srcObject = currentStream;\n            })\n\n        socket.on('me', (id) => setMe(id));\n\n        socket.on('calluser', ({from, name: callerName, signal}) => {\n            setCall({ isReceivedCall: true, from, name: callerName, signal});\n        })\n\n    }, []) \n\n    const answerCall = () => {\n        setcallAccepted(true);\n\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream\n        });\n\n        peer.on('signal', (data) => {\n            socket.emit('anwsercall', {\n                signal: data,\n                to: call.from\n            })\n        })\n\n        peer.on('stream', (currentStream) => {\n            userVideo.current.srcObject = currentStream;\n        })\n\n        peer.signal(call.signal);\n\n        connectionRef.current = peer;\n    }\n\n    const callUser = (id) => {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream\n        });\n\n        peer.on('signal', (data) => {\n            socket.emit('calluser', {\n                userToCall : id,\n                signalData: data,\n                from: me,\n                name\n            })\n        })\n\n        peer.on('stream', (currentStream) => {\n            userVideo.current.srcObject = currentStream;\n        })\n\n        socket.on('callaccepted', (signal) => {\n            setcallAccepted(true);\n\n            peer.signal(signal);\n        })\n\n        connectionRef.current = peer;\n    }\n\n    const leaveCall = () => {\n        setcallEnded(true);\n\n        connectionRef.current.destroy();\n\n        window.location.reload();\n    } \n\n    return (\n        <SocketContext.Provider value={\n            {\n                call,\n                callAccepted,\n                myVideo,\n                userVideo,\n                stream,\n                name,\n                setname,\n                callEnded,\n                me,\n                callUser,\n                leaveCall,\n                answerCall\n            }\n        }>\n            {children}\n        </SocketContext.Provider>\n    )\n}\n\nexport {ContextProvider, SocketContext};","import React, {useContext} from 'react';\nimport { SocketContext  } from '../SocketContext';\n\nconst VideoPlayer = () => {\n    const {name, setname, callAccepted, myVideo, userVideo, callEnded, stream, call} = useContext(SocketContext);\n\n    return (\n        <div className=\"video-player\">\n            {stream && (\n                <div className=\"video\">\n                    <header>{name || 'Name'}</header>\n                    <video playsInline muted ref={myVideo} autoPlay />\n                </div>\n            )}\n\n            {callAccepted && !callEnded && (\n                <div className=\"video\">\n                    <header>{call.name || 'Name'}</header>\n                    <video playsInline ref={userVideo} autoPlay />\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default VideoPlayer;\n","import React, {useContext, useState} from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { SocketContext } from '../SocketContext';\n\nconst Options = ({children}) => {\n    const {me, callAccepted, name, setname, callEnded, leaveCall, callUser } = useContext(SocketContext);\n    const [idToCall, setidToCall] = useState('');\n\n    function handleSubmit(e) {\n        e.preventDefault();\n    }\n    \n    return (\n        <div className=\"options\">\n            <div className=\"account-info\">\n                <form onSubmit={handleSubmit}>\n                    <input placeHolder=\"Enter Name\" label=\"Name\" value={name} onChange={(e) => {setname(e.target.value)}}/>\n                    {!callAccepted && !callEnded && (\n                    <CopyToClipboard text={me}>\n                        <button type=\"button\">\n                        Copy Your ID\n                        </button>\n                    </CopyToClipboard>\n                    )}\n                </form>\n                \n            </div>\n            <div className=\"make-a-call\">\n                <div>\n                    {callAccepted && !callEnded ? (\n                        <button onClick={leaveCall}>Hang Up</button>\n                    ) : (\n                        <form onSubmit={handleSubmit}>\n                            <input label=\"ID to Call\" value={idToCall} onChange={(e) => setidToCall(e.target.value)} />\n                            <button type=\"button\" onClick={() => callUser(idToCall)}>Call</button>\n                        </form>\n                    )}\n                </div>\n            </div>\n            {children}\n        </div>\n    )\n}\n\nexport default Options\n","import React, {useContext} from 'react'\nimport { SocketContext} from '../SocketContext';\n\nconst Notifications = () => {\n    const {answerCall, call, callAccepted} = useContext(SocketContext);\n\n    return (\n        <div className=\"notifications\">\n        {call.isReceivedCall && !callAccepted && (\n            <div>\n                <h1>{call.name} is calling: </h1>\n                <button onClick={answerCall}>Answer</button>\n            </div>\n        )}\n        </div>\n    )\n}\n\nexport default Notifications;\n","import React from 'react';\nimport VideoPlayer from './components/VideoPlayer';\nimport Options from './components/Options';\nimport Notifications from './components/Notifications';\n\nconst App = () => {\n    return (\n        <div>\n            <h1 className=\"Title\">SheZoom</h1>\n    \n            <VideoPlayer />\n            <Options>\n                <Notifications />\n            </Options>\n        </div>\n    )\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App.js';\nimport { ContextProvider } from './SocketContext.js';\nimport './styles.css';\n\nReactDOM.render(\n    <ContextProvider>\n        <App />\n    </ContextProvider>, document.getElementById('root')\n);"],"sourceRoot":""}